#!/usr/bin/env python3

import sys, os, traceback

# disable cache usage must be before any local imports
sys.dont_write_bytecode = True

"""
Depenencies
python3-pyqt5

To Do:

there's a bug with the 7i97 for configuring the Axes's on the 7i97,
you can configure the daughter card, but not the 7i97, which, is weird. 

Store Connector used for building config

"""
VERSION = '1.2.3'
BUILD_DATE = '01/25/2023'

from traceback import StackSummary
from functools import partial

from PyQt5.QtCore import QTimer, QSettings
from PyQt5 import QtCore, uic, QtWidgets
from PyQt5.QtWidgets import (QApplication, QMainWindow, QMessageBox,
	QDialog, qApp, QProgressBar)
from PyQt5.QtGui import QPixmap
from PyQt5 import uic

from libmesact.ui_mesact import Ui_mainWindow
from libmesact import startup
from libmesact import machine
from libmesact import boards
from libmesact import utilities
from libmesact import buildcombos
from libmesact import buildmenus
from libmesact import firmware
from libmesact import card
from libmesact import loadini
from libmesact import updateini
from libmesact import hal
from libmesact import checkconfig
from libmesact import buildconfig
from libmesact import extcmd
from libmesact import pcinfo
from libmesact import updates
from libmesact import settings
from libmesact import tools
from libmesact import helptext
from libmesact.help import Ui_Dialog as helpDialog
from libmesact.about import Ui_about as aboutDialog
from libmesact.ui_mesact import Ui_mainWindow # < for Translations
from libmesact import shutdown

class VersionError(QMainWindow):
	def __init__(self):
		super(VersionError, self).__init__()
		print('wrong python version')
		msgBox = QMessageBox()
		msgBox.setIcon(QMessageBox.Warning)
		msgBox.setWindowTitle('Version Error')
		msgBox.setText(f'Python 3.6 or newer is required.\nYour Python is {sys.version_info[0]}.{sys.version_info[1]}')
		msgBox.setStandardButtons(QMessageBox.Ok)
		msgBox.exec()
		sys.exit()

class MainWindow(QMainWindow, Ui_mainWindow): # < for Translations
#class MainWindow(QMainWindow):
	def __init__(self):
		super().__init__()
		# this causes problems with double tool bar entries...
		#self.setupUi(self) # < needed to load Ui_MainWindow for Translations
		self.trans = QtCore.QTranslator(self) # < needed for Translations
		if os.path.split(sys.argv[0])[0] == '/usr/bin':
			self.lib_path = '/usr/lib/libmesact'
			self.docs_path = '/usr/share/doc/mesact'
			self.installed = True
			uic.loadUi(os.path.join(self.lib_path, 'mesact.ui'), self)
		else:
			srcPath = os.path.split(os.path.realpath(sys.argv[0]))[0]
			self.lib_path = os.path.join(srcPath, 'libmesact')
			self.docs_path = srcPath
			self.installed = False
			uic.loadUi(os.path.join(srcPath, 'mesact.ui'), self)
		self.firmware_path = f'{os.path.expanduser("~")}/.local/lib/libmesact'
		self.image_path = f'{os.path.expanduser("~")}/.local/lib/libmesact/boards'
		sys.excepthook = self.excepthook
		self.version = VERSION
		self.emcVersion = '1.1'
		self.setWindowTitle(f'Mesa Configuration Tool - Version {VERSION} - Build Date {BUILD_DATE}')
		self.progressBar = QProgressBar()
		self.statusBar().addPermanentWidget(self.progressBar)
		self.configPath = ''
		self.board = '' # main board
		#self.card = '' # daughter card
		self.boardType = '' # pci or eth
		self.device = '' # needed for mesaflash
		self.cardType_0 = '' # step or servo
		self.cardType_1 = '' # step or servo
		self.fw = firmware
		self.mainBoards = ['5i25', '7i80db16', '7i80db25', '7i80hd16', '7i80hd25',
	'7i92', '7i92t', '7i93', '7i98']
		self.allInOneBoards = ['7i76e', '7i95', '7i96', '7i96s', '7i97']

		self.password = None
		self.newUser = None
		self.loading = False
		self.axes = 0
		self.timer=QTimer()
		buildcombos.build(self)
		buildmenus.build(self)
		self.helpInfo = helptext.descriptions
		self.updateini = updateini.updateini()
		self.loadini = loadini.openini()
		self.extcmd = extcmd.extcmd()
		self.ladderOptionsList = utilities.plcOptions()
		self.settings = QSettings('CnC Machines', 'MesaCT')
		self.setupConnections()
		startup.setup(self)
		self.show()

	def setupConnections(self):
		# Menu Items
		# for Translations
		self.actionEnglish.triggered.connect(partial(self.change_language, None))
		self.actionGerman.triggered.connect(partial(self.change_language, 'eng-de'))
		#self.actionFrench.triggered.connect(partial(self.change_language, 'eng-fr'))
		self.actionOpen.triggered.connect(partial(self.loadini.getini, self))
		self.actionCheck.triggered.connect(partial(checkconfig.checkit, self))
		self.actionBuild.triggered.connect(partial(buildconfig.build, self))
		self.actionTabHelp.triggered.connect(partial(self.help, 0))
		self.actionCheckUpdates.triggered.connect(partial(updates.checkUpdates, self))
		self.actionDlAmd64Deb.triggered.connect(partial(updates.downloadAmd64Deb, self))
		self.actionDlArmhfDeb.triggered.connect(partial(updates.downloadArmhDeb, self))
		self.actionDlArm64Deb.triggered.connect(partial(updates.downloadArm64Deb, self))
		self.actionFirmware.triggered.connect(partial(updates.downloadFirmware, self))
		self.actionDocuments.triggered.connect(partial(updates.openDoc, self))
		self.actionBoardImages.triggered.connect(partial(updates.boardImages, self))
		self.timer.timeout.connect(partial(updates.clearProgressBar, self))

		# Machine Tab
		self.configNameLE.textChanged[str].connect(partial(machine.configNameChanged, self))
		self.linearUnitsCB.currentIndexChanged.connect(partial(utilities.unitsChanged, self))
		self.trajMaxLinVelDSB.valueChanged.connect(partial(utilities.maxVelChanged, self))
		self.loadConfigCB.clicked.connect(partial(settings.update_value, self))
		self.boardCB.currentIndexChanged.connect(partial(boards.boardChanged, self))
		for i in range(2):
			getattr(self, f'daughterCB_{i}').currentIndexChanged.connect(partial(machine.daughterCardChanged, self))
		self.checkBoardPB.clicked.connect(partial(card.checkCard, self))
		self.firmwareCB.currentIndexChanged.connect(partial(utilities.firmwareChanged, self))
		self.readpdPB.clicked.connect(partial(card.readpd, self))
		self.readhmidPB.clicked.connect(partial(card.readhmid, self))
		self.flashPB.clicked.connect(partial(card.flashCard, self))
		self.reloadPB.clicked.connect(partial(card.reloadCard, self))
		self.verifyPB.clicked.connect(partial(card.verifyCard, self))
		self.copyPB.clicked.connect(partial(utilities.copyOutput, self))
		self.enableMesaflashCB.clicked.connect(partial(utilities.firmwareTools, self))
		self.enableMesaflashCB.clicked.connect(partial(settings.update_value, self))
		self.backupCB.clicked.connect(partial(utilities.backup, self))

		# Display Tab
		self.minLinJogVelDSB.valueChanged.connect(partial(utilities.unitsChanged, self))
		self.defLinJogVelDSB.valueChanged.connect(partial(utilities.unitsChanged, self))
		self.maxLinJogVelDSB.valueChanged.connect(partial(utilities.unitsChanged, self))
		self.minAngJogVelDSB.valueChanged.connect(partial(utilities.unitsChanged, self))
		self.defAngJogVelDSB.valueChanged.connect(partial(utilities.unitsChanged, self))
		self.maxAngJogVelDSB.valueChanged.connect(partial(utilities.unitsChanged, self))
		self.axisButtonGroup.setExclusive(False)  # Radio buttons are not exclusive
		self.axisButtonGroup.buttonClicked.connect(partial(utilities.axisDisplayChanged, self))

		#self.frontToolLatheRB.buttonClicked.connect(partial(utilities.axisDisplayChanged, self))
		#self.backToolLatheRB.buttonClicked.connect(partial(utilities.axisDisplayChanged, self))
		#self.foamRB.buttonClicked.connect(partial(utilities.axisDisplayChanged, self))

		# Info Tab

		# Axes Tab
		for i in range(6):
			for j in range(2):
				getattr(self, f'c{j}_axisCB_{i}').currentIndexChanged.connect(partial(utilities.axisChanged, self))
				getattr(self, f'c{j}_scale_{i}').textChanged.connect(partial(utilities.updateAxisInfo, self))
				getattr(self, f'c{j}_maxVelocity_{i}').textChanged.connect(partial(utilities.updateAxisInfo, self))
				getattr(self, f'c{j}_maxAccel_{i}').textChanged.connect(partial(utilities.updateAxisInfo, self))
				getattr(self, f'c{j}_ferrorDefault_{i}').clicked.connect(partial(utilities.ferrorSetDefault, self))
				getattr(self, f'c{j}_pidDefault_{i}').clicked.connect(partial(utilities.pidSetDefault, self))
				getattr(self, f'c{j}_analogDefault_{i}').clicked.connect(partial(utilities.analogSetDefault, self))
				getattr(self, f'c{j}_driveCB_{i}').currentIndexChanged.connect(partial(utilities.driveChanged, self))

		# I/O Tab
		for i in range(32):
			getattr(self, f'inputInvertCB_{i}').stateChanged.connect(partial(utilities.inputChanged, self))
			getattr(self, f'inputDebounceCB_{i}').stateChanged.connect(partial(utilities.inputChanged, self))

		# Spindle Tab
		self.pidDefault_s.clicked.connect(partial(utilities.pidSetDefault, self))
		self.spindleTypeCB.currentIndexChanged.connect(partial(utilities.spindleChanged, self))
		self.spindleFeedbackCB.currentIndexChanged.connect(partial(utilities.spindleFeedbackChanged, self))
		self.spindleDriveCB.currentIndexChanged.connect(partial(utilities.driveChanged, self))
		self.spindleMinRpm.valueChanged.connect(partial(utilities.spindleSettingsChanged, self))
		self.spindleMaxRpm.valueChanged.connect(partial(utilities.spindleSettingsChanged, self))
		self.spindleMaxAccel.valueChanged.connect(partial(utilities.spindleSettingsChanged, self))

		# Smart Serial Tab
		self.ssCardCB.currentIndexChanged.connect(partial(utilities.ssCardChanged, self))

		# HAL Tab
		self.buildHalPB.clicked.connect(partial(hal.buildHal, self))
		for i in range(6):
			getattr(self, f'halFunctionCB_{i}').currentIndexChanged.connect(partial(hal.functionChanged, self))
		for i in range(4):
			getattr(self, f'functionCountSB_{i}').valueChanged.connect(partial(hal.countChanged, self))

		# Pins Tab
		self.cardPinsPB.clicked.connect(partial(card.getCardPins, self))

		# PC Tab
		self.motherboardPB.clicked.connect(partial(pcinfo.mbInfo, self))
		self.cpuPB.clicked.connect(partial(pcinfo.cpuInfo, self))
		self.nicPB.clicked.connect(partial(pcinfo.nicInfo, self))
		self.calcNicPB.clicked.connect(partial(pcinfo.nicCalc, self))
		self.cpuSpeedPB.clicked.connect(partial(pcinfo.cpuSpeed, self))
		self.readTmaxPB.clicked.connect(partial(pcinfo.readTmax, self))
		self.writeTmaxPB.clicked.connect(partial(pcinfo.writeTmax, self))
		self.servoThreadTmaxPB.clicked.connect(partial(pcinfo.readServoTmax, self))
		self.calculateServoPB.clicked.connect(partial(pcinfo.calcServoPercent, self))
		self.latencyTestPB.clicked.connect(partial(tools.runLatencyHisogram, self))
		self.getipPB.clicked.connect(partial(pcinfo.ipInfo, self))

		# Options Tab
		#self.checkMesaflashCB.clicked.connect(partial(settings.update_value, self))
		self.newUserCB.clicked.connect(partial(settings.update_value, self))

	def change_language(self, translationFile = None):
		if translationFile is not None:
			self.trans.load(os.path.join(self.lib_path, translationFile))
			QtWidgets.QApplication.instance().installTranslator(self.trans)
			self.retranslateUi(self)
		else:
			QtWidgets.QApplication.instance().removeTranslator(self.trans)
			self.retranslateUi(self)

	def errorMsg(self, text, title=None):
		msgBox = QMessageBox()
		msgBox.setIcon(QMessageBox.Warning)
		msgBox.setWindowTitle(title)
		msgBox.setText(text)
		msgBox.setStandardButtons(QMessageBox.Cancel | QMessageBox.Ok)
		returnValue = msgBox.exec()
		if returnValue == QMessageBox.Ok:
			return True
		else:
			return False

	def errorMsgOk(self, text, title=None):
		msgBox = QMessageBox()
		msgBox.setIcon(QMessageBox.Warning)
		msgBox.setWindowTitle(title)
		msgBox.setText(text)
		msgBox.setStandardButtons(QMessageBox.Ok)
		returnValue = msgBox.exec()
		if returnValue == QMessageBox.Ok:
			return True
		else:
			return False

	def infoMsgOk(self, text, title=None):
		msgBox = QMessageBox()
		msgBox.setIcon(QMessageBox.Information)
		msgBox.setWindowTitle(title)
		msgBox.setText(text)
		msgBox.setStandardButtons(QMessageBox.Ok)
		returnValue = msgBox.exec()
		if returnValue == QMessageBox.Ok:
			return True
		else:
			return False

	def help(self, index = False):
		dialog = QtWidgets.QDialog()
		dialog.ui = helpDialog()
		dialog.ui.setupUi(dialog)
		dialog.ui.toClipboard.clicked.connect(partial(utilities.copyhelp, dialog.ui, self))
		if index:
			dialog.ui.helpPTE.setPlainText(self.helpInfo(index))
		else:
			index = self.mainTabs.currentIndex()
			if index == 6:
				tab = {0:60, 1:61, 2:62, 3:63, 4:64, 5:65, 6:66, 7:67, 8:68}
				dialog.ui.helpPTE.setPlainText(self.helpInfo(tab[self.smartSerialSW.currentIndex()]))
			else:
				dialog.ui.helpPTE.setPlainText(self.helpInfo(self.mainTabs.currentIndex()))
		dialog.exec_()

	def excepthook(self, exc_type, exc_value, tb):
		# extract the stack summary
		summary = traceback.extract_tb(tb)
		for frame_summary in summary:
			filename = frame_summary.filename
			frame_summary.filename = os.path.relpath(filename)

		# rebuild the traceback and build the error message
		msg = f'Mesact Version: {VERSION} Build Date: {BUILD_DATE}\n'
		msg += ''.join(traceback.format_list(StackSummary.from_list(summary)))
		msg += f'{exc_type.__name__}\n'
		msg += f'{exc_value}\n'
		msg += 'Please file an issue at\n'
		msg += 'https://github.com/jethornton/mesact/issues'
		print(msg)
		self.errorMsgOk(msg, 'PROGRAM ERROR' )

	def closeEvent(self, event):
		shutdown.save_settings(self)

def main():
	app = QApplication(sys.argv)
	major = int(f'{sys.version_info[0]}')
	minor = int(f'{sys.version_info[1]}')
	if major < 3 or major == 3 and minor < 6:
		ex = VersionError()
	else:
		ex = MainWindow()
	sys.exit(app.exec_())

if __name__ == "__main__":
	main()

